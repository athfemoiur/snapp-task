// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package services

import (
	"sync"
)

// Ensure, that CheckSchedulerMock does implement CheckScheduler.
// If this is not the case, regenerate this file with moq.
var _ CheckScheduler = &CheckSchedulerMock{}

// CheckSchedulerMock is a mock implementation of CheckScheduler.
//
//	func TestSomethingThatUsesCheckScheduler(t *testing.T) {
//
//		// make and configure a mocked CheckScheduler
//		mockedCheckScheduler := &CheckSchedulerMock{
//			ScheduleCheckFunc: func()  {
//				panic("mock out the ScheduleCheck method")
//			},
//		}
//
//		// use mockedCheckScheduler in code that requires CheckScheduler
//		// and then make assertions.
//
//	}
type CheckSchedulerMock struct {
	// ScheduleCheckFunc mocks the ScheduleCheck method.
	ScheduleCheckFunc func()

	// calls tracks calls to the methods.
	calls struct {
		// ScheduleCheck holds details about calls to the ScheduleCheck method.
		ScheduleCheck []struct {
		}
	}
	lockScheduleCheck sync.RWMutex
}

// ScheduleCheck calls ScheduleCheckFunc.
func (mock *CheckSchedulerMock) ScheduleCheck() {
	if mock.ScheduleCheckFunc == nil {
		panic("CheckSchedulerMock.ScheduleCheckFunc: method is nil but CheckScheduler.ScheduleCheck was just called")
	}
	callInfo := struct {
	}{}
	mock.lockScheduleCheck.Lock()
	mock.calls.ScheduleCheck = append(mock.calls.ScheduleCheck, callInfo)
	mock.lockScheduleCheck.Unlock()
	mock.ScheduleCheckFunc()
}

// ScheduleCheckCalls gets all the calls that were made to ScheduleCheck.
// Check the length with:
//
//	len(mockedCheckScheduler.ScheduleCheckCalls())
func (mock *CheckSchedulerMock) ScheduleCheckCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockScheduleCheck.RLock()
	calls = mock.calls.ScheduleCheck
	mock.lockScheduleCheck.RUnlock()
	return calls
}
