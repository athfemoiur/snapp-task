// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package db

import (
	"sync"
)

// Ensure, that DBMock does implement DB.
// If this is not the case, regenerate this file with moq.
var _ DB = &DBMock{}

// DBMock is a mock implementation of DB.
//
//	func TestSomethingThatUsesDB(t *testing.T) {
//
//		// make and configure a mocked DB
//		mockedDB := &DBMock{
//			SaveDataFunc: func(url string, pattern string, data string) error {
//				panic("mock out the SaveData method")
//			},
//		}
//
//		// use mockedDB in code that requires DB
//		// and then make assertions.
//
//	}
type DBMock struct {
	// SaveDataFunc mocks the SaveData method.
	SaveDataFunc func(url string, pattern string, data string) error

	// calls tracks calls to the methods.
	calls struct {
		// SaveData holds details about calls to the SaveData method.
		SaveData []struct {
			// URL is the url argument value.
			URL string
			// Pattern is the pattern argument value.
			Pattern string
			// Data is the data argument value.
			Data string
		}
	}
	lockSaveData sync.RWMutex
}

// SaveData calls SaveDataFunc.
func (mock *DBMock) SaveData(url string, pattern string, data string) error {
	if mock.SaveDataFunc == nil {
		panic("DBMock.SaveDataFunc: method is nil but DB.SaveData was just called")
	}
	callInfo := struct {
		URL     string
		Pattern string
		Data    string
	}{
		URL:     url,
		Pattern: pattern,
		Data:    data,
	}
	mock.lockSaveData.Lock()
	mock.calls.SaveData = append(mock.calls.SaveData, callInfo)
	mock.lockSaveData.Unlock()
	return mock.SaveDataFunc(url, pattern, data)
}

// SaveDataCalls gets all the calls that were made to SaveData.
// Check the length with:
//
//	len(mockedDB.SaveDataCalls())
func (mock *DBMock) SaveDataCalls() []struct {
	URL     string
	Pattern string
	Data    string
} {
	var calls []struct {
		URL     string
		Pattern string
		Data    string
	}
	mock.lockSaveData.RLock()
	calls = mock.calls.SaveData
	mock.lockSaveData.RUnlock()
	return calls
}
