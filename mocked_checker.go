// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package main

import (
	"sync"
)

// Ensure, that UrlCheckerMock does implement UrlChecker.
// If this is not the case, regenerate this file with moq.
var _ UrlChecker = &UrlCheckerMock{}

// UrlCheckerMock is a mock implementation of UrlChecker.
//
//	func TestSomethingThatUsesUrlChecker(t *testing.T) {
//
//		// make and configure a mocked UrlChecker
//		mockedUrlChecker := &UrlCheckerMock{
//			CheckDataFunc: func() error {
//				panic("mock out the CheckData method")
//			},
//		}
//
//		// use mockedUrlChecker in code that requires UrlChecker
//		// and then make assertions.
//
//	}
type UrlCheckerMock struct {
	// CheckDataFunc mocks the CheckData method.
	CheckDataFunc func() error

	// calls tracks calls to the methods.
	calls struct {
		// CheckData holds details about calls to the CheckData method.
		CheckData []struct {
		}
	}
	lockCheckData sync.RWMutex
}

// CheckData calls CheckDataFunc.
func (mock *UrlCheckerMock) CheckData() error {
	if mock.CheckDataFunc == nil {
		panic("UrlCheckerMock.CheckDataFunc: method is nil but UrlChecker.CheckData was just called")
	}
	callInfo := struct {
	}{}
	mock.lockCheckData.Lock()
	mock.calls.CheckData = append(mock.calls.CheckData, callInfo)
	mock.lockCheckData.Unlock()
	return mock.CheckDataFunc()
}

// CheckDataCalls gets all the calls that were made to CheckData.
// Check the length with:
//
//	len(mockedUrlChecker.CheckDataCalls())
func (mock *UrlCheckerMock) CheckDataCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockCheckData.RLock()
	calls = mock.calls.CheckData
	mock.lockCheckData.RUnlock()
	return calls
}
